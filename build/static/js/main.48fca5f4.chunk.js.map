{"version":3,"sources":["BusinessLogic.js","App.js","serviceWorker.js","index.js"],"names":["BusinessLogic","Object","classCallCheck","this","preRecordSize","recordSize","resultdata","current_sample","history","data","xvalues","yvalues","zvalues","sumx","sumz","i","length","Math","abs","max","apply","toConsumableArray","min","push","text","react_default","a","createElement","toFixed","graphdata","sq","parseFloat","sensordata","sensordata_in","map","d","objectSpread","AccV","sqrt","AccX","AccY","AccZ","DoWork","props","_this","possibleConstructorReturn","getPrototypeOf","call","state","recording","logic","_this2","gyro","setState","results","processRecordedData","v","shift","shouldRecordingStart","graph","graph2","App_TestGraph","range","labels","datas","console","log","style","fontSize","React","PureComponent","GyroGauge","Gauge_default","color","value","valueFormatter","width","window","innerWidth","height","label","TestOSC","_this3","accel","myRef","createRef","_this4","oscPort","osc","WebSocketPort","url","location","hostname","metadata","open","on","msg","decode","name","address","obj","args","current","newData","App_GyroGauge","App_DoWork","ref","Component","TestGraph","_this5","graphref","options","axisX","showGrid","showPoint","lineSmooth","fullWidth","low","high","chartist","Chartist","Line","updateData","chartdata","series","update","nextProps","App","_this6","changeField","e","newfields","showFields","fields","keys","filter","f","startsWith","forEach","className","App_TestOSC","Boolean","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"minCAoFeA,aAhFb,SAAAA,IAAeC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GAAAG,KAKfC,cAAgB,GALFD,KAOdE,WAAa,IANXF,KAAKG,WAAa,oEASCC,EAAgBC,GACnC,OAAGD,EAAe,IAAM,gDAQNE,EAAMC,EAASC,EAASC,GAY1C,IAXA,IAAIC,EAAO,EAEPC,EAAO,EASHC,EAAE,EAAEA,EAAEN,EAAKO,OAAOD,GAAI,EAC5BF,GAAcI,KAAKC,IAAIT,EAAKM,GAAG,IACjBE,KAAKC,IAAIT,EAAKM,GAAG,IAC/BD,GAAcG,KAAKC,IAAIT,EAAKM,GAAG,IAGjCF,GAAcJ,EAAKO,OACLP,EAAKO,OACnBF,GAAcL,EAAKO,OAEPC,KAAKE,IAALC,MAAAH,KAAIhB,OAAAoB,EAAA,EAAApB,CAAQS,IAAWO,KAAKK,IAALF,MAAAH,KAAIhB,OAAAoB,EAAA,EAAApB,CAAQS,IAK/C,OAHAP,KAAKG,WAAWiB,KAAKV,GAGd,CACLW,KACEC,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,qBAAcd,EAAKe,QAAQ,IAC3BH,EAAAC,EAAAC,cAAA,uBAAgBV,KAAKK,IAALF,MAAAH,KAAIhB,OAAAoB,EAAA,EAAApB,CAAQS,IAASkB,QAAQ,IAC7CH,EAAAC,EAAAC,cAAA,qBAAcV,KAAKE,IAALC,MAAAH,KAAIhB,OAAAoB,EAAA,EAAApB,CAAQS,IAASkB,QAAQ,IAC3CH,EAAAC,EAAAC,cAAA,mBAAYV,KAAKE,IAALC,MAAAH,KAAIhB,OAAAoB,EAAA,EAAApB,CAAQS,IAAWO,KAAKK,IAALF,MAAAH,KAAIhB,OAAAoB,EAAA,EAAApB,CAAQS,KAAUkB,QAAQ,MAGnEH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,qBAAcb,EAAKc,QAAQ,IAC3BH,EAAAC,EAAAC,cAAA,wBAAiBV,KAAKK,IAALF,MAAAH,KAAIhB,OAAAoB,EAAA,EAAApB,CAAQW,IAASgB,QAAQ,IAC9CH,EAAAC,EAAAC,cAAA,wBAAiBV,KAAKE,IAALC,MAAAH,KAAIhB,OAAAoB,EAAA,EAAApB,CAAQW,IAASgB,QAAQ,IAC5CH,EAAAC,EAAAC,cAAA,mBAAYV,KAAKE,IAALC,MAAAH,KAAIhB,OAAAoB,EAAA,EAAApB,CAAQW,IAAWK,KAAKK,IAALF,MAAAH,KAAIhB,OAAAoB,EAAA,EAAApB,CAAQW,KAAUgB,QAAQ,SAQ3EC,UAAY1B,KAAKG,2BCpEvB,SAASwB,EAAGJ,GACV,OAAOK,WAAWL,GAAKK,WAAWL,GAEpC,IAAIM,EAAaC,EAAcC,IAAI,SAACC,GAClC,OAAOlC,OAAAmC,EAAA,EAAAnC,CAAA,GACFkC,EADL,CAEEE,KAAMpB,KAAKqB,KAAKR,EAAGK,EAAEI,MAAQT,EAAGK,EAAEK,MAAQV,EAAGK,EAAEM,WAI7CC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAA3C,OAAAC,EAAA,EAAAD,CAAAE,KAAAuC,IACjBE,EAAA3C,OAAA4C,EAAA,EAAA5C,CAAAE,KAAAF,OAAA6C,EAAA,EAAA7C,CAAAyC,GAAAK,KAAA5C,KAAMwC,KACDK,MAAQ,CACXC,WAAW,GAEbL,EAAKK,WAAY,EACjBL,EAAKnC,KAAO,GAEZmC,EAAKM,MAAQ,IAAIlD,EARA4C,uEAUXnC,GAAM,IAAA0C,EAAAhD,KAERiD,EAAO3C,EAAK2C,KAChB,GAAKA,EAML,GAFAjD,KAAKM,KAAKc,KAAK6B,GAEXjD,KAAK8C,WACP,GAAI9C,KAAKM,KAAKO,OAASb,KAAK+C,MAAM7C,WAAY,CAC5C,IAAI8B,EAAI,CAAC,EAAG,EAAG,GAAGD,IAAI,SAACnB,GAAD,OAAOoC,EAAK1C,KAAKyB,IAAI,SAACC,GAAD,OAAOA,EAAEpB,OACpDZ,KAAKkD,SAAS,CAAC5C,KAAM0B,EAAGc,WAAW,IACnC9C,KAAK8C,WAAY,EACjB,IAAIK,EAAUnD,KAAK+C,MAAMK,oBAAoBpD,KAAKM,KAAMN,KAAKM,KAAKyB,IAAI,SAAAsB,GAAC,OAAIA,EAAE,KAAKrD,KAAKM,KAAKyB,IAAI,SAAAsB,GAAC,OAAIA,EAAE,KAAKrD,KAAKM,KAAKyB,IAAI,SAAAsB,GAAC,OAAIA,EAAE,MAEjIrD,KAAKkD,SAAS,CAACC,QAASA,IACxBnD,KAAKM,KAAO,QAET,CACL,KAAON,KAAKM,KAAKO,OAASb,KAAK+C,MAAM9C,eACnCD,KAAKM,KAAKgD,QAERtD,KAAK+C,MAAMQ,qBAAqBN,EAAMjD,KAAKM,QAC7CN,KAAKkD,SAAS,CAACJ,WAAW,IAC1B9C,KAAK8C,WAAY,qCAKrB,IAAIU,EACFC,EAMEN,EAcJ,OAnBInD,KAAK6C,MAAMvC,OACbkD,EAAQlC,EAAAC,EAAAC,cAACkC,EAAD,CAAWC,MAAO,EAAE,IAAI,KAAMC,OAAQ,CAAC,QAAS,QAAS,SAAUC,MAAO7D,KAAK6C,MAAMvC,QAE/FwD,QAAQC,IAAI,UAGR/D,KAAK6C,MAAMM,UACTnD,KAAK6C,MAAMM,QAAQ9B,OACrB8B,EAAW7B,EAAAC,EAAAC,cAAA,OAAKwC,MAAO,CACnBC,SAAa,SAEdjE,KAAK6C,MAAMM,QAAQ9B,OAGrBrB,KAAK6C,MAAMM,QAAQzB,YACpB+B,EAASnC,EAAAC,EAAAC,cAACkC,EAAD,CAAWE,OAAQ,CAAC,QAASC,MAAO,CAAC7D,KAAK6C,MAAMM,QAAQzB,eAI7DJ,EAAAC,EAAAC,cAAA,WACNF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WAAM2B,GADR,cAGInD,KAAK6C,MAAMC,UACP,MACA,KALR,iBAOiB9C,KAAK+C,MAAM9C,cAP5B,kBAQkBD,KAAK+C,MAAM7C,YAG5BsD,EACDlC,EAAAC,EAAAC,cAAA,WACCiC,UA5EcS,IAAMC,eAiFrBC,mLAEF,OAAQ9C,EAAAC,EAAAC,cAAC6C,EAAA9C,EAAD,CAAO+C,MAAOtE,KAAKwC,MAAM8B,MAAOC,MAAOvE,KAAKwC,MAAM+B,MAAOpD,KAAM,IAAMH,IAAK,IAAMwD,eAAgB,SAACjD,GAAD,OAAOA,EAAEE,QAAQ,IAAIgD,MAAOC,OAAOC,WAAa,IAAKC,OAAQ,IAAKC,MAAO7E,KAAKwC,MAAMqC,eAFxKX,IAAMC,eAMxBW,cACJ,SAAAA,EAAYtC,GAAO,IAAAuC,EAAA,OAAAjF,OAAAC,EAAA,EAAAD,CAAAE,KAAA8E,IACjBC,EAAAjF,OAAA4C,EAAA,EAAA5C,CAAAE,KAAAF,OAAA6C,EAAA,EAAA7C,CAAAgF,GAAAlC,KAAA5C,KAAMwC,KACDK,MAAQ,CACXmC,MAAO,CACL,EAAG,EAAG,GAER/B,KAAM,CAAC,EAAG,EAAG,IAEf8B,EAAKE,MAAQf,IAAMgB,YARFH,mFAUC,IAAAI,EAAAnF,KACdoF,EAAU,IAAIC,IAAIC,cAAc,CAClCC,IAAK,QAAUb,OAAOc,SAASC,SAAW,QAC1CC,UAAU,IAEZN,EAAQO,OACRP,EAAQQ,GAAG,UAAW,SAACC,GAOrB,IAAIC,EAAS,SAACC,GACZ,GAAIF,EAAIG,UAAY,IAAMD,EAAM,CAC9B,IAAIE,EAAM,GACVA,EAAIF,GAAQF,EAAIK,KAAKnE,IAAI,SAACR,EAAGX,GAAJ,OAAUW,EAAEgD,QACrCY,EAAKjC,SAAS+C,GACVd,EAAKF,MAAMkB,SACbhB,EAAKF,MAAMkB,QAAQC,QAAQH,KAIjCH,EAAO,QACPA,EAAO,WAET9F,KAAKoF,QAAUA,mCAGf,OAAQ9D,EAAAC,EAAAC,cAAA,WACNF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,kBACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAKxB,KAAK6C,MAAMI,KAAK,IACrB3B,EAAAC,EAAAC,cAAA,UAAKxB,KAAK6C,MAAMI,KAAK,IACrB3B,EAAAC,EAAAC,cAAA,UAAKxB,KAAK6C,MAAMI,KAAK,OAI3B3B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6E,EAAD,CAAW/B,MAAM,MAAMC,MAAOvE,KAAK6C,MAAMI,KAAK,GAAI4B,MAAM,cACxDvD,EAAAC,EAAAC,cAAC6E,EAAD,CAAW/B,MAAM,QAAQC,MAAOvE,KAAK6C,MAAMI,KAAK,GAAI4B,MAAM,aAC1DvD,EAAAC,EAAAC,cAAC6E,EAAD,CAAW/B,MAAM,OAAOC,MAAOvE,KAAK6C,MAAMI,KAAK,GAAI4B,MAAM,aAE3DvD,EAAAC,EAAAC,cAAC8E,EAAD,CAAQC,IAAKvG,KAAKiF,gBAvDFuB,aA4DhBC,cACJ,SAAAA,EAAYjE,GAAO,IAAAkE,EAAA,OAAA5G,OAAAC,EAAA,EAAAD,CAAAE,KAAAyG,IACjBC,EAAA5G,OAAA4C,EAAA,EAAA5C,CAAAE,KAAAF,OAAA6C,EAAA,EAAA7C,CAAA2G,GAAA7D,KAAA5C,KAAMwC,KAEDmE,SAAWzC,IAAMgB,YAEtBwB,EAAK7D,MAAQ,GALI6D,mFAQjB,IAAIE,EAAU,CACZC,MAAO,CACLC,UAAU,GAEZC,WAAW,EACXD,UAAU,EACVE,YAAY,EACZC,WAAW,GAEVjH,KAAKwC,MAAMmB,QACZiD,EAAQM,IAAMlH,KAAKwC,MAAMmB,MAAM,GAC/BiD,EAAQO,KAAOnH,KAAKwC,MAAMmB,MAAM,IAElC3D,KAAKoH,SAAW,IAAIC,IAASC,KAAKtH,KAAK2G,SAASR,QAAS,GAAIS,GAE7D5G,KAAKuH,WAAWvH,KAAKwC,0CAGZA,GAET,IAEIgF,EAAY,CACdC,OAAQjF,EAAMoB,OAAO7B,IAAI,SAAC8C,EAAOjE,GAC/B,MAAO,CAACN,KAAMkC,EAAMqB,MAAMjD,GAAImF,KAAMlB,MAIxC7E,KAAKoH,SAASM,OAAOF,qDAGGG,GACxB3H,KAAKuH,WAAWI,oCAIhB,OAAQrG,EAAAC,EAAAC,cAAA,WAENF,EAAAC,EAAAC,cAAA,OAAK+E,IAAKvG,KAAK2G,SAAU3C,MAAO,CAC5BS,MAAO,OACPG,OAAQ,eAjDM4B,aAuGToB,cA9Cb,SAAAA,EAAYpF,GAAO,IAAAqF,EAAA/H,OAAAC,EAAA,EAAAD,CAAAE,KAAA4H,IACjBC,EAAA/H,OAAA4C,EAAA,EAAA5C,CAAAE,KAAAF,OAAA6C,EAAA,EAAA7C,CAAA8H,GAAAhF,KAAA5C,KAAMwC,KAYRsF,YAAc,SAACC,GACb,IAAIC,EAASlI,OAAAmC,EAAA,EAAAnC,CAAA,GACR+H,EAAKhF,MAAMoF,YAEhBD,EAAUD,IAAMC,EAAUD,GAC1BF,EAAK3E,SAAS,CAAC+E,WAAYD,KAf3B,IAAIE,EAASpI,OAAOqI,KAAKtG,EAAW,IACpCqG,EAASA,EAAOE,OAAO,SAACC,GAAD,OAAQA,EAAEC,WAAW,SAAWD,EAAEC,WAAW,UACpE,IAAIL,EAAa,GALA,OAMjBC,EAAOK,QAAQ,SAAAF,GAAC,OAAIJ,EAAWI,IAAK,IACpCR,EAAKhF,MAAQ,CACXqF,OAAQA,EACRD,WAAYA,GATGJ,wEAqCjB,OAAQvG,EAAAC,EAAAC,cAAA,OAAKgH,UAAU,OACrBlH,EAAAC,EAAAC,cAACiH,EAAD,KACEnH,EAAAC,EAAAC,cAAC8E,EAAD,eAxCUE,aCrNEkC,QACW,cAA7BhE,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASkD,MACvB,2DCVNC,IAASC,OAAOvH,EAAAC,EAAAC,cAACsH,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.48fca5f4.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\n\r\nclass BusinessLogic {\r\n  constructor() {\r\n    this.resultdata = []\r\n  }\r\n\r\n  // How much should be recorded prior to the trigger\r\n  preRecordSize = 20;\r\n  // How much data should be recorded after the trigger\r\n  recordSize = 120;\r\n\r\n  // Return true if the system should start recording\r\n  shouldRecordingStart(current_sample, history) {\r\n    if(current_sample[1] >= 300) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Process the recorded data\r\n  processRecordedData(data, xvalues, yvalues, zvalues) {\r\n    var sumx = 0;\r\n    var sumy = 0;\r\n    var sumz = 0;\r\n\r\n    // sum = sum + data[0][0];\r\n    // sum = sum + data[1][0];\r\n    // sum = sum + data[2][0];\r\n    // sum = sum + data[3][0];\r\n    // sum = sum + data[4][0];\r\n    // sum = sum + data[5][0];\r\n\r\n    for(var i=0;i<data.length;i=i+1) {\r\n      sumx = sumx + Math.abs(data[i][0])\r\n      sumy = sumy + Math.abs(data[i][1])\r\n      sumz = sumz + Math.abs(data[i][2])\r\n    }\r\n\r\n    sumx = sumx / data.length\r\n    sumy = sumy / data.length\r\n    sumz = sumz / data.length\r\n\r\n    var diff = (Math.max(...xvalues) - Math.min(...xvalues))\r\n\r\n    this.resultdata.push(sumx)\r\n\r\n\r\n    return {\r\n      text: (\r\n        <table>\r\n          <tbody>\r\n          <tr>\r\n            <td>\r\n              <h1>Twist</h1>\r\n              <ul>\r\n              <li>Average { sumx.toFixed(1) }</li>\r\n              <li>Clockwise { Math.min(...xvalues).toFixed(1) }</li>\r\n              <li>Counter { Math.max(...xvalues).toFixed(1) }</li>\r\n              <li>Diff { (Math.max(...xvalues) - Math.min(...xvalues)).toFixed(1) }</li>\r\n              </ul>\r\n            </td>\r\n            <td>\r\n              <h1>Side-Side</h1>\r\n              <ul>\r\n              <li>Average { sumz.toFixed(1) }</li>\r\n              <li>Left-Right { Math.min(...zvalues).toFixed(1) }</li>\r\n              <li>Right-Left { Math.max(...zvalues).toFixed(1) }</li>\r\n                <li>Diff { (Math.max(...zvalues) - Math.min(...zvalues)).toFixed(1) }</li>\r\n              </ul>\r\n            </td>\r\n          </tr>\r\n          </tbody>\r\n        </table>\r\n\r\n      ),\r\n      graphdata : this.resultdata\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default BusinessLogic;\r\n","import React, {Component} from 'react';\r\nimport Chartist from 'chartist'\r\nimport sensordata_in from './data.json'\r\nimport \"chartist/dist/chartist.css\";\r\nimport osc from 'osc/dist/osc-browser'\r\nimport Gauge from 'react-svg-gauge';\r\nimport BusinessLogic from './BusinessLogic';\r\nimport './App.css';\r\n\r\n// Add one more which is AccV\r\nfunction sq(a) {\r\n  return parseFloat(a) * parseFloat(a)\r\n}\r\nvar sensordata = sensordata_in.map((d) => {\r\n  return {\r\n    ...d,\r\n    AccV: Math.sqrt(sq(d.AccX) + sq(d.AccY) + sq(d.AccZ))\r\n  }\r\n})\r\n\r\nclass DoWork extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      recording: false\r\n    }\r\n    this.recording = false; // Copy of it because the state is set within the render cycle\r\n    this.data = []; // Data stored while we are recording\r\n\r\n    this.logic = new BusinessLogic();\r\n  }\r\n  newData(data) {\r\n    //console.log(data);\r\n    var gyro = data.gyro;\r\n    if (!gyro) {\r\n      return;\r\n    }\r\n\r\n    this.data.push(gyro);\r\n\r\n    if (this.recording) {\r\n      if (this.data.length > this.logic.recordSize) {\r\n        var d = [0, 1, 2].map((i) => this.data.map((d) => d[i]))\r\n        this.setState({data: d, recording: false})\r\n        this.recording = false\r\n        var results = this.logic.processRecordedData(this.data, this.data.map(v => v[0]), this.data.map(v => v[1]), this.data.map(v => v[2]));\r\n        // XXX Do something with the results\r\n        this.setState({results: results});\r\n        this.data = [];\r\n      }\r\n    } else {\r\n      while (this.data.length > this.logic.preRecordSize) {\r\n        this.data.shift(); // Remove from fifo\r\n      }\r\n      if (this.logic.shouldRecordingStart(gyro, this.data)) {\r\n        this.setState({recording: true})\r\n        this.recording = true;\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    var graph,\r\n      graph2;\r\n    if (this.state.data) {\r\n      graph = <TestGraph range={[-200,700]} labels={[\"GyroX\", \"GyroY\", \"GyroZ\"]} datas={this.state.data}/>\r\n    }\r\n    console.log(\"render\")\r\n\r\n    var results;\r\n    if (this.state.results) {\r\n      if (this.state.results.text) {\r\n        results = (<div style={{\r\n            \"fontSize\" : \"400%\"\r\n          }}>\r\n          {this.state.results.text}\r\n        </div>)\r\n      }\r\n      if(this.state.results.graphdata) {\r\n        graph2 = <TestGraph labels={[\"Data\"]} datas={[this.state.results.graphdata]}/>\r\n      }\r\n    }\r\n\r\n    return (<div>\r\n      <div>\r\n        <div>{results}</div>\r\n        Recording: {\r\n          this.state.recording\r\n            ? \"YES\"\r\n            : \"NO\"\r\n        }\r\n        , Pre-Record: {this.logic.preRecordSize}\r\n        , Record-Size: {this.logic.recordSize}\r\n\r\n      </div>\r\n      {graph}\r\n      <hr/>\r\n      {graph2}\r\n    </div>);\r\n  }\r\n}\r\n\r\nclass GyroGauge extends React.PureComponent {\r\n  render() {\r\n    return (<Gauge color={this.props.color} value={this.props.value} min={-1000} max={1000} valueFormatter={(a) => a.toFixed(1)} width={window.innerWidth / 3.5} height={320} label={this.props.label}/>);\r\n  }\r\n}\r\n\r\nclass TestOSC extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      accel: [\r\n        0, 0, 0\r\n      ],\r\n      gyro: [0, 0, 0]\r\n    }\r\n    this.myRef = React.createRef();\r\n  }\r\n  componentDidMount() {\r\n    var oscPort = new osc.WebSocketPort({\r\n      url: \"ws://\" + window.location.hostname + \":8080\", // URL to your Web Socket server.\r\n      metadata: true\r\n    });\r\n    oscPort.open();\r\n    oscPort.on(\"message\", (msg) => {\r\n\r\n      function filter(oldv, newv) {\r\n        var alpha = 0.99;\r\n        return oldv * alpha + newv * (1.0 - alpha)\r\n      }\r\n\r\n      var decode = (name) => {\r\n        if (msg.address === '/' + name) {\r\n          var obj = {};\r\n          obj[name] = msg.args.map((a, i) => a.value); // filter(this.state[name][i], a.value))\r\n          this.setState(obj)\r\n          if (this.myRef.current) {\r\n            this.myRef.current.newData(obj);\r\n          }\r\n        }\r\n      }\r\n      decode(\"gyro\");\r\n      decode(\"accel\");\r\n    })\r\n    this.oscPort = oscPort\r\n  }\r\n  render() {\r\n    return (<div>\r\n      <ul>\r\n        <li>Gyro:\r\n          <ul>\r\n            <li>{this.state.gyro[0]}</li>\r\n            <li>{this.state.gyro[1]}</li>\r\n            <li>{this.state.gyro[1]}</li>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n      <div>\r\n        <GyroGauge color='red' value={this.state.gyro[0]} label=\"Twist (X)\"/>\r\n        <GyroGauge color='green' value={this.state.gyro[1]} label=\"Side (Y)\"/>\r\n        <GyroGauge color='blue' value={this.state.gyro[2]} label=\"Tip (Z)\"/>\r\n      </div>\r\n      <DoWork ref={this.myRef}/>\r\n    </div>);\r\n  }\r\n}\r\n\r\nclass TestGraph extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.graphref = React.createRef();\r\n\r\n    this.state = {}\r\n  }\r\n  componentDidMount() {\r\n    var options = {\r\n      axisX: {\r\n        showGrid: false\r\n      },\r\n      showPoint: false,\r\n      showGrid: false,\r\n      lineSmooth: false,\r\n      fullWidth: true\r\n    }\r\n    if(this.props.range) {\r\n      options.low = this.props.range[0]\r\n      options.high = this.props.range[1]\r\n    }\r\n    this.chartist = new Chartist.Line(this.graphref.current, {}, options);\r\n\r\n    this.updateData(this.props);\r\n  }\r\n\r\n  updateData(props) {\r\n\r\n    var colors = ['redgraph', 'greengraph', 'bluegraph']\r\n\r\n    var chartdata = {\r\n      series: props.labels.map((label, i) => {\r\n        return {data: props.datas[i], name: label}\r\n      })\r\n    }\r\n\r\n    this.chartist.update(chartdata)\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    this.updateData(nextProps);\r\n  }\r\n  render() {\r\n\r\n    return (<div>\r\n\r\n      <div ref={this.graphref} style={{\r\n          width: \"100%\",\r\n          height: 500\r\n        }}></div>\r\n\r\n    </div>)\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var fields = Object.keys(sensordata[0])\r\n    fields = fields.filter((f) => !f.startsWith(\"Mag\") && !f.startsWith(\"Time\"))\r\n    var showFields = {};\r\n    fields.forEach(f => showFields[f] = true)\r\n    this.state = {\r\n      fields: fields,\r\n      showFields: showFields\r\n    }\r\n\r\n  }\r\n  changeField = (e) => {\r\n    var newfields = {\r\n      ...this.state.showFields\r\n    }\r\n    newfields[e] = !newfields[e]\r\n    this.setState({showFields: newfields})\r\n  }\r\n  render() {\r\n    //var labels = Object.keys(this.state.showFields).filter((f) => this.state.showFields[f])\r\n    // var datas = labels.map((field) => {\r\n    //   return sensordata.map(d => d[field]);\r\n    // })\r\n\r\n    // <ul>\r\n    //   {\r\n    //     this.state.fields.map((f) => {\r\n    //       return (<li key={f}>\r\n    //         <input type=\"checkbox\" checked={this.state.showFields[f]} onChange={() => this.changeField(f)}></input>{f}</li>)\r\n    //     })\r\n    //   }\r\n    // </ul>\r\n    // <TestGraph labels={labels} datas={datas}/>\r\n    // <pre>{JSON.stringify(sensordata.slice(0,5),null,2)}</pre>\r\n\r\n    return (<div className=\"App\">\r\n      <TestOSC>\r\n        <DoWork/>\r\n      </TestOSC>\r\n\r\n    </div>);\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}